Performance

Insertion:
Linked List: O(1) time complexity (insertion at the head).
Search and Deletion:
Linked List: O(n) time complexity.

Conclusion:

For small to medium-sized applications (like the mini-shell)
the O(n) search time of the linked list is acceptable.

Memory Overhead
Linked List:
Each node contains two pointers (address and next).
Minimal memory overhead.

Linked List Approach:

Aligns with the project's needs.
Simplicity makes it easier to integrate and maintain.
Performance is adequate for the expected workload.

Pros:
Simple and effective for small applications.
Low memory overhead.
Easier to implement and maintain.
Cons:
Less efficient for a large number of allocations.

Function Documentation:
 
 /**
 * Initializes the garbage collector.
 * Must be called before using other garbage collector functions.
 */
void init_garbage_collector(void);

/**
 * Allocates memory of the given size and tracks it for garbage collection.
 *
 * @param size The size of the memory block to allocate.
 * @return A pointer to the allocated memory, or NULL if allocation fails.
 */
void *gc_allocate(size_t size);

/**
 * Deallocates a memory block that was allocated with gc_allocate.
 *
 * @param address The address of the memory block to deallocate.
 * @return GC_SUCCESS if deallocation was successful,
 *         GC_NOT_FOUND if the address was not found in the garbage list,
 *         GC_FAILURE if the address is NULL.
 */
t_gc_status gc_deallocate(void *address);

/**
 * Deallocates all memory blocks managed by the garbage collector.
 * After calling this function, all pointers returned by gc_allocate are invalid.
 */
void gc_cleanup(void);
