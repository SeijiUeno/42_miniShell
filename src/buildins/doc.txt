#Echo

AUX: check_if_arg_minus_n :
This function checks if a given string (arg) is a valid -n flag. 
It supports:
The exact -n.
Flags like -nn, -nnnn, etc., which are common in GNU-compatible echo.
How It Works:
*
If the arg is NULL or doesn’t start with -n, return 0 (not a valid -n flag).
ft_strncmp ensures that the first two characters are exactly -n.
Starts checking from index 2 (immediately after -n).
Loops through any additional n characters.
If it reaches the end of the string (\0), the argument is a valid -n flag, so it returns 1
If any non-n character is found, it’s not a valid -n flag.
*
Why It’s Useful?
Modularizes flag checking, making the code reusable and testable.
Handles both simple and complex -n flag cases efficiently.

& Main Function: echo
Purpose
Implements the behavior of the echo command:

Prints arguments, separated by spaces.
By default, appends a newline unless the -n flag is used.
How It Works:
*
1-
Tracks the index of the current argument (args[i]).
print_newline: A flag indicating whether a newline (\n) should be printed at the end. 
It defaults to 1 (true).
2- 
Iterates through the arguments starting from args[1].
Calls check_if_arg_minus_n for each argument:
    If a valid -n flag is found, it sets print_newline to 0 (disable newline).
    Increments i to move to the next argument.
Stops at the first non--n argument.
Why This Step Exists?
Ensures compatibility with multiple -n flags, like echo -n -n hello.
Avoids printing -n flags as part of the output.
3-
Loops through the remaining arguments:
Prints the current argument with ft_putstr_fd.
Checks if another argument exists (args[++i]) after the current one.
If yes, prints a space between arguments.
Stops when all arguments are printed.
Why This Step Exists?
Ensures arguments are separated by spaces.
Avoids trailing spaces at the end of the output.
4 - (if applicable)
If print_newline is still 1, appends a newline to the output.
Skipped if the -n flag was detected earlier.
Why This Step Exists:

Mimics the default behavior of echo, which appends a newline unless told not to
5 - return success
*

Behavior Examples:
Command	Output
echo hello world	        hello world\n
echo -n hello world	        hello world
echo -nn hello world	    hello world
echo -n -n hello world	    hello world
echo

Complexity Analysis
The overall space complexity is:
O(1)
Time complexity
Best Case: O(1)
(no -n flag and only one short argument is printed)
Worst Case: O(m * k)
-m represents the total number of arguments passed to the echo function (args).
-k represents the average length of the arguments that are checked

What This Means for Real-World Usage
Typical Usage:
The echo implementation will run efficiently for most shell scripts or command-line inputs.

Unusual Edge Cases:
Deliberately constructed inputs with many long arguments could cause slower performance. 
This isn't likely to be a concern in normal operations but is worth noting for stress-testing 
or malicious scenarios.


#pwd 
command retrieves and displays the current working directory. 
This implementation involves two key components:

malloc_pwd(): Dynamically allocates memory to store the current working directory.
pwd(): Serves as the main function that invokes malloc_pwd() and prints the directory.
Key Features
Dynamic Buffer Management: Automatically resizes the buffer to handle directories of varying lengths.
Garbage Collection-Like Mechanism: Uses custom functions (gc_allocate and gc_deallocate) to manage memory safely, minimizing leaks.
Error Handling: Checks for potential issues such as insufficient buffer size or permission errors, using errno for diagnostics.

Detailed Analysis
Auxiliary Function: malloc_pwd()
Purpose
malloc_pwd() allocates memory dynamically to store the current working directory. It ensures the buffer is sufficiently large, resizing if necessary.

How It Works
Initial Buffer Allocation:

Starts with a buffer size of 1024 bytes.
Allocates memory using gc_allocate().
If allocation fails, the function returns NULL.
Retrieve Current Directory:

Calls getcwd(buffer, chars) to fetch the directory path.
If successful, returns the buffer containing the directory.
Handle Buffer Size Issues:

If getcwd() fails with errno == ERANGE, the buffer size is insufficient.
Deallocates the current buffer using gc_deallocate(), doubles the buffer size, and retries.
Repeats until the buffer is large enough or the maximum limit (PATH_MAX * 8) is reached.
Handle Other Errors:

If getcwd() fails for reasons other than ERANGE (e.g., permission errors), the function deallocates the buffer and returns NULL.
Return Value
Returns the buffer containing the directory path if successful.
Returns NULL on error or if the buffer size exceeds the maximum limit.
Why It’s Useful
Dynamic Buffer Management ensures flexibility for directories of varying depths.
Memory Safety minimizes the risk of leaks through explicit garbage collection.
Main Function: pwd()
Purpose
Implements the behavior of the pwd command by printing the current working directory or handling errors gracefully.

How It Works
Initialization:

Accepts arguments, marking them as unused with (void)args; to suppress warnings.
Retrieve Directory:

Calls malloc_pwd() to fetch the directory.
If malloc_pwd() returns NULL, prints an error to stderr and exits with EXIT_FAILURE.
Print Directory:

If successful, prints the directory to stdout using ft_putendl_fd().
Optional Memory Cleanup:

Optionally deallocates the directory buffer with gc_deallocate() if the garbage collector does not handle it automatically.
Return Value:
Returns EXIT_SUCCESS on success or EXIT_FAILURE on error.

Behavior Examples


Command	Output
pwd	                    /home/user
pwd (error)         	Error: Failed to get current working directory.

Complexity Analysis


Space Complexity
O(n)
where n is the length of the current working directory.
The buffer dynamically resizes to fit the directory path.

Time Complexity
Best Case: O(1) 
if the initial buffer is sufficient to store the path.
Worst Case: O(log n) 
due to exponential buffer resizing when the path is exceptionally long.


Real-World Considerations
Typical Usage
The implementation handles most scenarios efficiently, accommodating deep directory structures with its dynamic resizing mechanism.
Edge Cases
Very Deep Directory Paths:
For paths longer than the initial buffer size, the function resizes the buffer iteratively until the path fits.
If the path exceeds the maximum allowed size (PATH_MAX * 8), the function reports an error.
Memory Constraints:
In low-memory environments, repeated resizing might fail due to insufficient memory.
Summary
The pwd command implementation for the mini-shell project balances flexibility, efficiency, and safety:

Dynamic Buffer Management ensures adaptability to paths of varying lengths.
Garbage Collection Mechanism minimizes memory leaks.
Error Handling reports issues clearly to maintain a robust user experience.

